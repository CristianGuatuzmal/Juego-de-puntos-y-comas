package mundo;

/*This import is used to access the .sort() method
 */
import java.util.Arrays;

/**
 * This class takes the number generated by "elGenerador" sorts and compares it with the
 * number given by the user, giving back to the interface the dots and commas array
 * to be shown based on the wining way. the objective is to get the number which the program 
 * generated. once the player writes and compares the number, there will appear a dot for each 
 * number who is in the right place and a comma for each number in the wrong place, if the number
 * is not in the objective number, there will not appear anything. The objective number can't have
 * the same number twice
 * 
 * @author Cristian Guatuzmal
 * 
 */
public class Comparador {
	
	/**
	 * This variable is the number generated by "elGenerador", and is the number the user
	 * has to achieve
	 */
	private Integer numeroObjetivo;
	/**
	 * This variable is the number given by the user, it has to be compared with 
	 * {@link #numeroObjetivo} to obtain the dots and commas array
	 */
	private Integer numeroActual;
	/**
	 * This is the number of positions the number will have, 10 is the maximum
	 */
    private int numeroDeCifras;
    
    /**
     * This relation is necessary to obtain the number generated by the method
     * generarNumero() in {@link #elGenerador}
     */
    
    private  Generador elGenerador;
	
   /**
    * This is the constructor, there, the relation is initialized, {@link #numeroDeCifras}
    * receives the first value of 4 and the value of generarNumero() in {@link #elGenerador}
    * is given to {@link #numeroObjetivo}
    */
    public Comparador () {
		
    	elGenerador=new Generador();
    	numeroDeCifras =  4;
        numeroObjetivo = elGenerador.generarNumero(numeroDeCifras);
	}
    
    /**
     * This is the getter for {@link #numeroObjetivo}
     * @return {@link #numeroObjetivo}
     */
	public int getNumeroObjetivo() {
		return numeroObjetivo;
	}
	
	/**
	 * This is the setter for {@link #numeroObjetivo}
	 * @param numeroObjetivo: this is the new value that {@link #numeroObjetivo} will take
	 */
	public void setNumeroObjetivo(int numeroObjetivo) {
		this.numeroObjetivo = numeroObjetivo;
	}
	
	/**
	 * This is the getter for {@link #numeroActual}
	 * @return {@link #numeroActual}
	 */
	public int getNumeroActual() {
		return numeroActual;
	}
	
	/**
	 * This is the setter for {@link #numeroActual}
	 * @param numeroActual: this is the new value that {@link #numeroObjetivo} will take
	 */
	public void setNumeroActual(int numeroActual) {
		this.numeroActual = numeroActual;
	}
    
	/**
	 * This is the getter for {@link #numeroDeCifras}
	 * @return {@link #numeroDeCifras}
	 */
	public int getNumeroDeCifras() {
        return numeroDeCifras;
    }
	
	/**
	 * This is the setter for {@link #numeroDeCifras}
	 * @param numeroDeCifras: this is the new value that {@link #numeroDeCifras} will take 
	 */
    public void setNumeroDeCifras(int numeroDeCifras) {
        this.numeroDeCifras = numeroDeCifras;
    }
	
	/**
	 * This method is called inside {@link #puntosYComas()}, and it's purpose is to put the dots and
	 * commas in a standard distribution, so the dots and commas positions don't match with the
	 * position of the found number
	 * @param comasEnBruto: which is the String to be sorted 
	 * @return a dots and commas String sorted, making all the dots and all the commas being appended
	 * in groups
	 */
	public String ordenamiento(String comasEnBruto) {
		
		String result = "";
		
		char [] numerosOrdenandose = new char[comasEnBruto.length()];
		
		for(int i=0; i<comasEnBruto.length(); i++) {
			numerosOrdenandose[i]=comasEnBruto.charAt(i);
		}
		
		Arrays.sort(numerosOrdenandose);
		
		for(int j=0; j<comasEnBruto.length();j++) {
			result+=(char)numerosOrdenandose[j];
		}
		
		return result;
	}
	
	/**
	 * This is a getter intended to give access to the methods of the class to other methods
	 * @return {@link #elGenerador}
	 */
	public Generador getElGenerador() {
		return elGenerador;
	}
	
	/**
	 * This is the most important method, this method compares the number given by the user with
	 * the number generated by {@link #elGenerador}, giving dots and commas according to the game
	 * rules
	 * @return Sorted String of dots and commas, ready to be showed to the player 
	 */
	public String puntosYComas() {
		
		String result="";
		String numeroAAlcanzar = numeroObjetivo.toString();
		String numeroIngresado = numeroActual.toString();
		
		if(numeroAAlcanzar.length()==numeroIngresado.length()) {
			for(int i=0;i<numeroAAlcanzar.length(); i++) {
				boolean checker = false;
				int j = 0;
				while(checker==false&&j<numeroAAlcanzar.length()){
					char cifraComparada;
					if(numeroAAlcanzar.charAt(i)==numeroIngresado.charAt(j)&&i==j) {
						cifraComparada='.';
						result+=cifraComparada;
						checker=true;
					}
					else if(numeroAAlcanzar.charAt(i)==numeroIngresado.charAt(j)) {
						cifraComparada=',';
						result+=cifraComparada;
						checker=true;
					}
					j++;
				}
			}
		}
		result=ordenamiento(result);
		return result;
	}
}